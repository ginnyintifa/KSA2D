this_t   = t.test(s1_d1_use[x,], s2_d1_use[x,], paired = T)
this_p = this_t$p.value
return(this_p)
}))
Z_pdf_name = paste0(working_dir,compare_name, "_Z_hist.pdf")
pdf(Z_pdf_name,useDingbats = F)
hist(s1_s2_Z_use, breaks  = 100)
dev.off()
cat("Z generated.", "\n")
#### generate null z
null_permute =
shuffle_time_points( sample_size = ncol(s1_d1_use),
numPermu = permute_times,
# numPermu = 100,
seeds = all_seeds)
null_permute
s1_s2_z_null_use = lapply(1:permute_times, function(x)
{
# x = 15
this_assign = null_permute[[x]]
#first = which(this_assign ==1)
which_flip = which(this_assign == 2)
this_c1_d1 = s1_d1_use
this_c2_d1 = s2_d1_use
this_c1_d1[,which_flip] = s2_d1_use[,which_flip]
this_c2_d1[,which_flip] = s1_d1_use[,which_flip]
permute_use = s1_s2_filter_1d(s1_d1 = this_c1_d1,
s2_d1 = this_c2_d1,
names = s1_s2_use[[3]],
nna_cutoff = nna_cutoff)
this_z= generate_oneSample_tstat_1d(s1_df1 = permute_use[[1]],
s2_df1 = permute_use[[2]])
if(x%%100 == 0)
cat(x, "\n")
return(this_z)
})
s1_s2_z_null_use_cat =  Reduce(c, s1_s2_z_null_use)
z_null_pdf_name = paste0(working_dir,compare_name, "_z_null_hist_new.pdf")
pdf(z_null_pdf_name,useDingbats = F)
hist(s1_s2_z_null_use_cat, breaks  = 100)
dev.off()
s1_s2_z_null_use_cat =  Reduce(c, s1_s2_z_null_use)
z_null_pdf_name = paste0(working_dir,compare_name, "_z_null_hist_new.pdf")
pdf(z_null_pdf_name,useDingbats = F)
hist(s1_s2_z_null_use_cat, breaks  = 100)
dev.off()
if(length(null_permute)>2^length(s1_col_name))
{
null_permute = unique(null_permute)
permute_times = 2^length(s1_col_name)
}
null_permute
permute_times
s1_s2_z_null_use = lapply(1:permute_times, function(x)
{
# x = 15
this_assign = null_permute[[x]]
#first = which(this_assign ==1)
which_flip = which(this_assign == 2)
this_c1_d1 = s1_d1_use
this_c2_d1 = s2_d1_use
this_c1_d1[,which_flip] = s2_d1_use[,which_flip]
this_c2_d1[,which_flip] = s1_d1_use[,which_flip]
permute_use = s1_s2_filter_1d(s1_d1 = this_c1_d1,
s2_d1 = this_c2_d1,
names = s1_s2_use[[3]],
nna_cutoff = nna_cutoff)
this_z= generate_oneSample_tstat_1d(s1_df1 = permute_use[[1]],
s2_df1 = permute_use[[2]])
if(x%%100 == 0)
cat(x, "\n")
return(this_z)
})
s1_s2_z_null_use_cat =  Reduce(c, s1_s2_z_null_use)
z_null_pdf_name = paste0(working_dir,compare_name, "_z_null_hist_new2.pdf")
pdf(z_null_pdf_name,useDingbats = F)
hist(s1_s2_z_null_use_cat, breaks  = 100)
dev.off()
Z_dens = density(s1_s2_Z_use, n = 2000)
z_null_dens = density(s1_s2_z_null_use_cat, n = 2000)
Zz_dens_pdf_name = paste0(working_dir,compare_name, "_Zz_dens_more_new.pdf")
ylimit = max(z_null_dens$y)
xmin = min(c(z_null_dens$x, Z_dens$x))
xmax = max(c(z_null_dens$x, Z_dens$x))
pdf(Zz_dens_pdf_name,useDingbats = F)
plot(z_null_dens, col = "green", ylim = c(0,ylimit), xlim = c(xmin,xmax))
lines(Z_dens)
dev.off()
cat("z null generated.", "\n")
Z_zero_which = which(abs(Z_dens$x-0) == min(abs(Z_dens$x-0)))[1]
Z_zero_dens = Z_dens$y[Z_zero_which]
z_null_zero_which = which(abs(z_null_dens$x-0) == min(abs(z_null_dens$x-0)))[1]
z_null_zero_dens = z_null_dens$y[z_null_zero_which]
s1_s2_p0_use = Z_zero_dens/z_null_zero_dens
s1_s2_p0_use
f02f = rep(0, length(s1_s2_Z_use))
for(i in 1:length(s1_s2_Z_use))
{
this_value = s1_s2_Z_use[i]
### find the most similar in z_null_dens
dis_this = abs(this_value-Z_dens$x)
nearest = which(dis_this == min(dis_this))[1]
this_Z_f = Z_dens$y[nearest]
dis_this_null = abs(this_value-z_null_dens$x)
nearest_null = which(dis_this_null == min(dis_this_null))[1]
this_Z_f0 = z_null_dens$y[nearest_null]
f02f[i] = this_Z_f0/this_Z_f
}
Z_p0 = s1_s2_p0_use*f02f
Z_p1 = 1-Z_p0
### new overlay
posterior_pdf_name = paste0(working_dir,compare_name, "_Z_posterior_new.pdf")
### when plot remove the outlier ones
pdf(posterior_pdf_name,useDingbats = F)
plot(x = s1_s2_Z_use,
y = Z_p1,
ylim = c(-1,1),
type = "p",
pch = 16)
dev.off()
p1_corrected = Z_p1
p1_corrected[which(Z_p1<0)]=0
lfdr = 1-p1_corrected
### a scatter plot
# sanity_pdf_name = paste0(working_dir,compare_name, "_ttest_check.pdf")
#
# ### when plot remove the outlier ones
#
# #leftones = which(s1_s2_Z_use< 0)
#
# pdf(sanity_pdf_name,useDingbats = F)
#
# plot(x = t_Z,
#      y = lfdr,
#      xlim = c(0,1),
#      ylim = c(0,1),
#      type = "p",
#      cex = 0.5,
#      xlab = "ttest p value",
#      ylab = "local fdr",
#      pch = 16)
# abline(a= 0, b = 1,lty = 2)
#
# plot(x = s1_s2_Z_use,
#      y = t_Z,
#      xlim = c(-15,15),
#      ylim = c(0,1),
#      type = "p",
#      cex = 0.5,
#      xlab = "Z",
#      ylab = "ttest pvalue/lfdr",
#      pch = 16)
# lines(x = s1_s2_Z_use,
#       y = lfdr,
#       type = "p",
#       cex = 0.5,
#       col = "red",
#       pch = 16)
# abline(v =0,lty = 2)
#
#
# dev.off()
#
#
result_df = data.frame(name =s1_s2_use[[3]],
fc = s1_s2_lfc,
Z = s1_s2_Z_use,
p1 = Z_p1,
p1_corrected = p1_corrected,
fdr = 1-p1_corrected,
stringsAsFactors = F)%>%
dplyr::arrange(desc(p1))
result_df_name = paste0(working_dir, compare_name,"_Z_result.tsv")
Z_p1
quantile(Z_p1)
quantile(lfdr)
p1_corrected = Z_p1
p1_corrected[which(Z_p1<0)]=0
lfdr = 1-p1_corrected
result_df = data.frame(name =s1_s2_use[[3]],
fc = s1_s2_lfc,
Z = s1_s2_Z_use,
p1 = Z_p1,
p1_corrected = p1_corrected,
fdr = 1-p1_corrected,
stringsAsFactors = F)%>%
dplyr::arrange(desc(p1))
result_df_name = paste0(working_dir, compare_name,"_Z_result.tsv")
write.table(result_df, result_df_name,
quote = F, row.names = F, sep = "\t")
sanity_pdf_name = paste0(working_dir,compare_name, "_ttest_check.pdf")
### when plot remove the outlier ones
#leftones = which(s1_s2_Z_use< 0)
pdf(sanity_pdf_name,useDingbats = F)
plot(x = t_Z,
y = lfdr,
xlim = c(0,1),
ylim = c(0,1),
type = "p",
cex = 0.5,
xlab = "ttest p value",
ylab = "local fdr",
pch = 16)
abline(a= 0, b = 1,lty = 2)
plot(x = s1_s2_Z_use,
y = t_Z,
xlim = c(-15,15),
ylim = c(0,1),
type = "p",
cex = 0.5,
xlab = "Z",
ylab = "ttest pvalue/lfdr",
pch = 16)
lines(x = s1_s2_Z_use,
y = lfdr,
type = "p",
cex = 0.5,
col = "red",
pch = 16)
abline(v =0,lty = 2)
dev.off()
f1_dens  = rep(0, length(Z_dens$x))
for(i in 1:length(Z_dens$x))
{
this_value = Z_dens$x[i]
this_dens = Z_dens$y[i]
### find the most similar in z_null_dens
dis_this = abs(this_value-z_null_dens$x)
nearest = which(dis_this == min(dis_this))[1]
this_null_dens = z_null_dens$y[nearest]
f1_dens[i] = (this_dens-s1_s2_p0_use*this_null_dens)/(1-s1_s2_p0_use)  ### here is problematic in the 2d scenario, check this
}
### something is wrong here?
### p0 is too small
# if(min(f1_dens) <0)
#   f1_dens = f1_dens-min(f1_dens)
#
#### I need to correct this part
f1_dens[which(f1_dens<0)] = 0
overlay_dens_pdf_name =  paste0(working_dir, compare_name,"_dens_overlay.pdf")
ylimit = max(c(max(z_null_dens$y),Z_dens$y, f1_dens))
pdf(overlay_dens_pdf_name,useDingbats = F)
plot(x = Z_dens$x, y = f1_dens, type = "l",ylim = c(0,ylimit), xlim = c(-10,10), col = "red")
lines(z_null_dens, col = "green")
lines(Z_dens)
dev.off()
#### new overlay
pdf( paste0(working_dir, compare_name,"_dens_overlay_prop.pdf"))
this_y_lim = max(c(Z_dens$y, s1_s2_p0_use * z_null_dens$y,(1-s1_s2_p0_use)*f1_dens))
plot(x = Z_dens$x, y = Z_dens$y,ylim = c(0,this_y_lim), xlim = c(-10,10), type = "l")
lines(x = z_null_dens$x, y= s1_s2_p0_use * z_null_dens$y, col = "green")
lines(x = Z_dens$x, y = (1-s1_s2_p0_use)*f1_dens, type = "l", col = "red")
dev.off()
cat("posterior calculated.", "\n")
s1_col_name = wnt3a
s2_col_name = ctrl
d1_data = wnt_mrna
nna_cutoff = 2
all_seeds = seeds
permute_times = 1000
working_dir = "/Users/Ginny/Google Drive/DUKE_wnt_20201221/"
compare_name = "wnt3a_ctrl_mrna"
s1_d1 = d1_data[,s1_col_name]
s2_d1 = d1_data[,s2_col_name]
#### filter data
s1_s2_use = s1_s2_filter_1d(
s1_d1 = s1_d1,
s2_d1 = s2_d1,
names = d1_data[,1],
nna_cutoff = nna_cutoff
)
### this function is not very correct
cat("data filtered.", "\n")
#### generate Z
s1_d1_use = s1_s2_use[[1]]
s2_d1_use = s1_s2_use[[2]]
s1_s2_Z_use = generate_oneSample_tstat_1d(s1_df1 = s1_d1_use,
s2_df1 = s2_d1_use)
### produce the original log2 fold change
s1_s2_lfc = compute_log2foldchage(s1_df1 = s1_d1_use,
s2_df1 = s2_d1_use)
t_Z =unlist(lapply(1:nrow(s1_d1_use), function(x)
{
this_t   = t.test(s1_d1_use[x,], s2_d1_use[x,], paired = T)
this_p = this_t$p.value
return(this_p)
}))
Z_pdf_name = paste0(working_dir,compare_name, "_Z_hist.pdf")
pdf(Z_pdf_name,useDingbats = F)
hist(s1_s2_Z_use, breaks  = 100)
dev.off()
cat("Z generated.", "\n")
#### generate null z
null_permute =
shuffle_time_points( sample_size = ncol(s1_d1_use),
numPermu = permute_times,
# numPermu = 100,
seeds = all_seeds)
### reduce the null_permute to the unique number
if(length(null_permute)>2^length(s1_col_name))
{
null_permute = unique(null_permute)
permute_times = 2^length(s1_col_name)
}
s1_s2_z_null_use = lapply(1:permute_times, function(x)
{
# x = 15
this_assign = null_permute[[x]]
#first = which(this_assign ==1)
which_flip = which(this_assign == 2)
this_c1_d1 = s1_d1_use
this_c2_d1 = s2_d1_use
this_c1_d1[,which_flip] = s2_d1_use[,which_flip]
this_c2_d1[,which_flip] = s1_d1_use[,which_flip]
permute_use = s1_s2_filter_1d(s1_d1 = this_c1_d1,
s2_d1 = this_c2_d1,
names = s1_s2_use[[3]],
nna_cutoff = nna_cutoff)
this_z= generate_oneSample_tstat_1d(s1_df1 = permute_use[[1]],
s2_df1 = permute_use[[2]])
if(x%%100 == 0)
cat(x, "\n")
return(this_z)
})
s1_s2_z_null_use_cat =  Reduce(c, s1_s2_z_null_use)
z_null_pdf_name = paste0(working_dir,compare_name, "_z_null_hist.pdf")
pdf(z_null_pdf_name,useDingbats = F)
hist(s1_s2_z_null_use_cat, breaks  = 100)
dev.off()
Z_dens = density(s1_s2_Z_use, n = 2000)
z_null_dens = density(s1_s2_z_null_use_cat, n = 2000)
Zz_dens_pdf_name = paste0(working_dir,compare_name, "_Zz_dens.pdf")
ylimit = max(z_null_dens$y)
xmin = min(c(z_null_dens$x, Z_dens$x))
xmax = max(c(z_null_dens$x, Z_dens$x))
pdf(Zz_dens_pdf_name,useDingbats = F)
plot(z_null_dens, col = "green", ylim = c(0,ylimit), xlim = c(xmin,xmax))
lines(Z_dens)
dev.off()
cat("z null generated.", "\n")
#############################################
#############################################
#############################################
Z_zero_which = which(abs(Z_dens$x-0) == min(abs(Z_dens$x-0)))[1]
Z_zero_dens = Z_dens$y[Z_zero_which]
z_null_zero_which = which(abs(z_null_dens$x-0) == min(abs(z_null_dens$x-0)))[1]
z_null_zero_dens = z_null_dens$y[z_null_zero_which]
s1_s2_p0_use = Z_zero_dens/z_null_zero_dens
### calculate f/f0 for each Z
#
#
# #######
# ######
# nn = c(201:2000)
# pp  = rep(0, 1800)
# for (i in 1:1800)
# {
#   n =512
#   Z_dens = density(s1_s2_Z_use, n = n)
#   z_null_dens = density(s1_s2_z_null_use_cat, n = n)
#
#   Z_zero_which = which(abs(Z_dens$x-0) == min(abs(Z_dens$x-0)))[1]
#   Z_zero_dens = Z_dens$y[Z_zero_which]
#
#   z_null_zero_which = which(abs(z_null_dens$x-0) == min(abs(z_null_dens$x-0)))[1]
#   z_null_zero_dens = z_null_dens$y[z_null_zero_which]
#
#
#   s1_s2_p0_use = Z_zero_dens/z_null_zero_dens
#   pp[i]  = s1_s2_p0_use
#
# }
#######
#######
f02f = rep(0, length(s1_s2_Z_use))
for(i in 1:length(s1_s2_Z_use))
{
this_value = s1_s2_Z_use[i]
### find the most similar in z_null_dens
dis_this = abs(this_value-Z_dens$x)
nearest = which(dis_this == min(dis_this))[1]
this_Z_f = Z_dens$y[nearest]
dis_this_null = abs(this_value-z_null_dens$x)
nearest_null = which(dis_this_null == min(dis_this_null))[1]
this_Z_f0 = z_null_dens$y[nearest_null]
f02f[i] = this_Z_f0/this_Z_f
}
Z_p0 = s1_s2_p0_use*f02f
Z_p1 = 1-Z_p0
### new overlay
posterior_pdf_name = paste0(working_dir,compare_name, "_Z_posterior.pdf")
### when plot remove the outlier ones
pdf(posterior_pdf_name,useDingbats = F)
plot(x = s1_s2_Z_use,
y = Z_p1,
ylim = c(-1,1),
type = "p",
pch = 16)
dev.off()
p1_corrected = Z_p1
p1_corrected[which(Z_p1<0)]=0
lfdr = 1-p1_corrected
## a scatter plot
sanity_pdf_name = paste0(working_dir,compare_name, "_ttest_check.pdf")
### when plot remove the outlier ones
#leftones = which(s1_s2_Z_use< 0)
pdf(sanity_pdf_name,useDingbats = F)
plot(x = t_Z,
y = lfdr,
xlim = c(0,1),
ylim = c(0,1),
type = "p",
cex = 0.5,
xlab = "ttest p value",
ylab = "local fdr",
pch = 16)
abline(a= 0, b = 1,lty = 2)
plot(x = s1_s2_Z_use,
y = t_Z,
xlim = c(-15,15),
ylim = c(0,1),
type = "p",
cex = 0.5,
xlab = "Z",
ylab = "ttest pvalue/lfdr",
pch = 16)
lines(x = s1_s2_Z_use,
y = lfdr,
type = "p",
cex = 0.5,
col = "red",
pch = 16)
abline(v =0,lty = 2)
dev.off()
#
result_df = data.frame(name =s1_s2_use[[3]],
fc = s1_s2_lfc,
Z = s1_s2_Z_use,
p1 = Z_p1,
p1_corrected = p1_corrected,
fdr = 1-p1_corrected,
stringsAsFactors = F)%>%
dplyr::arrange(desc(p1))
result_df_name = paste0(working_dir, compare_name,"_Z_result.tsv")
write.table(result_df, result_df_name,
quote = F, row.names = F, sep = "\t")
f1_dens  = rep(0, length(Z_dens$x))
for(i in 1:length(Z_dens$x))
{
this_value = Z_dens$x[i]
this_dens = Z_dens$y[i]
### find the most similar in z_null_dens
dis_this = abs(this_value-z_null_dens$x)
nearest = which(dis_this == min(dis_this))[1]
this_null_dens = z_null_dens$y[nearest]
f1_dens[i] = (this_dens-s1_s2_p0_use*this_null_dens)/(1-s1_s2_p0_use)  ### here is problematic in the 2d scenario, check this
}
### something is wrong here?
### p0 is too small
# if(min(f1_dens) <0)
#   f1_dens = f1_dens-min(f1_dens)
#
#### I need to correct this part
f1_dens[which(f1_dens<0)] = 0
overlay_dens_pdf_name =  paste0(working_dir, compare_name,"_dens_overlay.pdf")
ylimit = max(c(max(z_null_dens$y),Z_dens$y, f1_dens))
pdf(overlay_dens_pdf_name,useDingbats = F)
plot(x = Z_dens$x, y = f1_dens, type = "l",ylim = c(0,ylimit), xlim = c(-10,10), col = "red")
lines(z_null_dens, col = "green")
lines(Z_dens)
dev.off()
#### new overlay
pdf( paste0(working_dir, compare_name,"_dens_overlay_prop.pdf"))
this_y_lim = max(c(Z_dens$y, s1_s2_p0_use * z_null_dens$y,(1-s1_s2_p0_use)*f1_dens))
plot(x = Z_dens$x, y = Z_dens$y,ylim = c(0,this_y_lim), xlim = c(-10,10), type = "l")
lines(x = z_null_dens$x, y= s1_s2_p0_use * z_null_dens$y, col = "green")
lines(x = Z_dens$x, y = (1-s1_s2_p0_use)*f1_dens, type = "l", col = "red")
dev.off()
cat("posterior calculated.", "\n")
setwd("/Users/ginny/Google Drive/KSA2D_github/KS2D")
document()
setwd("/Users/ginny/Google Drive/KSA2D_github/KSA2D")
document()
remove.packages("KSA2D")
detach("package:KSA2D", unload=TRUE)
library("devtools")
devtools::install_github("ginnyintifa/KSA2D")
library(data.table)
library(dplyr)
library(magrittr)
wnt_mrna = fread("/Users/Ginny/Google Drive/DUKE_wnt_20201221/mRNA_data_log2.txt",
stringsAsFactors = F, data.table = F)
set.seed(123)
seeds = matrix(sample(c(1:30000),10000,replace = F), nrow = 1000, ncol = 4)
seeds
wnt3a = grep("Wnt3A_", colnames(wnt_mrna), value = T)
ctrl = grep("Ctrl_", colnames(wnt_mrna), value = T)
wnt3a_ctrl = comparison_time_points_1d(
s1_col_name = wnt3a,
s2_col_name = ctrl,
d1_data = wnt_mrna,
nna_cutoff = 2,
all_seeds = seeds,
permute_times = 1000,
working_dir = "/Users/Ginny/Google Drive/DUKE_wnt_20201221/test/",
compare_name = "wnt3a_ctrl_mrna")
2^length(s1_col_name)
2^length(s1_col_name)
length(null_permute)
comparison_time_points_1d
detach("package:KSA2D", unload=TRUE)
remove.packages("KSA2D")
